{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","imageUrl","setImageUrl","modelLoaded","setModelLoaded","classificationResult","setClassificationResult","fetchImage","useCallback","a","fetch","then","response","url","classifyImage","useEffect","onNextImage","e","preventDefault","ml5","classifier","image","document","getElementById","classify","err","results","length","result","confidence","label","className","id","src","alt","crossOrigin","type","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"sSA2FeA,MAtFf,WAAgB,IAAD,EAEmBC,mBAAS,IAF5B,mBAENC,EAFM,KAEIC,EAFJ,OAGyBF,oBAAS,GAHlC,mBAGNG,EAHM,KAGOC,EAHP,OAI2CJ,mBAAS,IAJpD,mBAINK,EAJM,KAIgBC,EAJhB,KAMPC,EAAaC,sBAAW,sBAAC,sBAAAC,EAAA,6DAC7BL,GAAe,GADc,kBAEtBM,MAAM,iCAAiCC,MAAK,SAACC,GAChDV,EAAYU,EAASC,KACrBC,QAJyB,2CAM5B,IAEHC,qBAAU,WACRR,MACC,CAACA,IAEJ,IAAMS,EAAW,uCAAG,WAAMC,GAAN,SAAAR,EAAA,6DAClBQ,EAAEC,iBACFhB,EAAY,IAFM,SAGZK,IAHY,2CAAH,sDAOXO,EAAa,uCAAG,8BAAAL,EAAA,sEACKU,kBAAoB,aADzB,OACdC,EADc,OAEdC,EAAQC,SAASC,eAAe,SACtCnB,GAAe,GACfgB,EAAWI,SAASH,GAAO,SAACI,EAAKC,GAC/B,GAAGD,EACDnB,EAAwB,0EAExB,GAAGoB,GAAWA,EAAQC,OAAQ,CAC5B,IAAMC,EAASF,EAAQ,GACvBpB,EAAwB,cAAD,OAAmC,IAApBsB,EAAOC,WAAtB,0BAAwDD,EAAOE,MAA/D,WAEvBxB,EAAwB,4BAZV,2CAAH,qDAoBnB,OACE,sBAAKyB,UAAU,MAAf,UACC,0DAEE9B,EAEE,sBAAK8B,UAAU,YAAf,UACI,oCACG,qBAAKC,GAAG,QAAQC,IAAKhC,EAAUiC,IAAI,SAASC,YAAY,cACxD,wBAAQC,KAAK,SAASC,QAAS,SAACpB,GAAD,OAAOD,EAAYC,IAAlD,qBAEH,yBAASc,UAAU,SAAnB,SAEK5B,EACE,+BACA,4BACCE,MAKD,sEAWX,iDCtEMiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7B,MAAK,YAAkD,IAA/C8B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1B,SAASC,eAAe,SAM1Be,M","file":"static/js/main.77bd8b1b.chunk.js","sourcesContent":["\nimport { useCallback, useEffect, useState } from 'react';\nimport * as ml5 from 'ml5';\nimport './App.css';\n\nfunction App() {\n\n  const [imageUrl, setImageUrl] = useState('');\n  const [modelLoaded, setModelLoaded] = useState(false);\n  const [classificationResult, setClassificationResult] = useState('');\n\n  const fetchImage = useCallback(async() => {\n    setModelLoaded(false);\n    return fetch(`https://picsum.photos/600/500`).then((response) => {\n        setImageUrl(response.url);\n        classifyImage();\n      });\n  }, [])\n\n  useEffect(() => {\n    fetchImage();\n  }, [fetchImage]);\n\n  const onNextImage = async(e) => {\n    e.preventDefault();\n    setImageUrl('');\n    await fetchImage();\n    \n  }\n\n  const classifyImage = async() => {\n    const classifier = await ml5.imageClassifier('MobileNet');\n    const image = document.getElementById('image');\n    setModelLoaded(true);\n    classifier.classify(image, (err, results) => {\n      if(err) {\n        setClassificationResult('An error occurred while processing the request. Please try again.');\n      } else {\n        if(results && results.length) {\n          const result = results[0];\n          setClassificationResult(`The app is ${result.confidence * 100}% that this is ${result.label}.`);\n        } else {\n          setClassificationResult('Result not available.');\n        }\n        \n      }\n      \n    });\n  }\n\n  return (\n    <div className=\"App\">\n     <h1>ML5 Image Classification</h1>\n     {\n       imageUrl ? (\n         \n         <div className=\"container\">\n             <section>\n                <img id=\"image\" src={imageUrl} alt=\"random\" crossOrigin=\"anonymous\"/>\n                <button type=\"button\" onClick={(e) => onNextImage(e)}>Next</button>\n             </section>\n             <section className=\"result\">\n                {\n                  modelLoaded ? (\n                    <span>\n                    <b>\n                    {classificationResult}\n                    </b>\n                      \n                    </span>\n                  ) : (\n                    <span>\n                      Classification in progress...\n                    </span>\n                  )\n                }\n             </section>\n             \n        </div>\n       \n        \n       ) : (\n         <div>\n           Loading...\n         </div>\n       )\n     }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}